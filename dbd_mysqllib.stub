;;-*- mode: scheme -*-
;; mysqllib.stub - mysql driver stub
;;
;;  Copyright (c) 2003-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003-2007 Time Intermedia Corporation, All rights reserved.
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;
;; $Id: dbd_mysqllib.stub,v 1.19 2007/02/21 08:18:57 bizenn Exp $

"
#include \"dbd_mysql.h\"
"

(define-type <mysql-handle> "MYSQL*" "MySQL handle"
  "MYSQL_HANDLE_P" "MYSQL_HANDLE_UNBOX" "MYSQL_HANDLE_BOX")
(define-type <mysql-res> "MYSQL_RES*" "MySQL result handle"
  "MYSQL_RES_P" "MYSQL_RES_UNBOX" "MYSQL_RES_BOX")
(define-type <mysql-stmt> "MYSQL_STMTX*" "MySQL enhanced statement handle"
  "MYSQL_STMTX_P" "MYSQL_STMTX_UNBOX" "MYSQL_STMTX_BOX")

;; key to the foreign pointer attribute to keep track of closed state
;; of handles.
(define-symbol closed? "sym_closed")

;; Constructors
(define-cproc mysql-real-connect (host::<const-cstring>?
				  user::<const-cstring>?
				  password::<const-cstring>?
				  db::<const-cstring>?
				  port::<uint>
				  unix_socket::<const-cstring>?
				  client_flag::<uint>)
  (call <mysql-handle> "MysqlRealConnect"))

(define-cproc mysql-handle-closed? (connection::<mysql-handle>)
  (expr <boolean> "MysqlClosedP(connection_scm)"))

(define-cproc mysql-real-query (connection::<mysql-handle> query::<string>)
  (body <void>
	"const ScmStringBody *body = SCM_STRING_BODY(query);"
	"const char *q = SCM_STRING_BODY_START(body);"
        "unsigned int qlen = SCM_STRING_BODY_SIZE(body);"
        "if (mysql_real_query(connection, q, qlen) != 0)"
	"  raise_mysql_error(connection, \"mysql_real_query\");"
	))

(define-cproc mysql-affected-rows (connection::<mysql-handle>)
  (call "MysqlAffectedRows"))

(define-cproc mysql-real-escape-string (connection::<mysql-handle>
                                        string::<string>)
  (body "const ScmStringBody *body = SCM_STRING_BODY(string);"
        "const char *s = SCM_STRING_BODY_START(body);"
        "unsigned int origsize = SCM_STRING_BODY_SIZE(body);"
        "unsigned int bufsize = origsize*2+2;"
        "char *buf = SCM_NEW_ATOMIC2(char*, bufsize);"
        "unsigned long finalsize = mysql_real_escape_string(connection, buf, s, origsize);"
        "SCM_RESULT = Scm_MakeString(buf, finalsize, -1, SCM_MAKSTR_COPYING);")) ; buf is now NUL terminated.

(define-cproc mysql-store-result (connection::<mysql-handle>)
  (body <mysql-res>?
	"SCM_RESULT = mysql_store_result(connection);"
	"if ((SCM_RESULT == NULL) && (mysql_errno(connection) != 0))"
	"  raise_mysql_error(connection, \"mysql_store_result\");"))

(define-cproc mysql-error (connection::<mysql-handle>)
  (call <const-cstring> "mysql_error"))

(define-cproc mysql-errno (connection::<mysql-handle>)
  (call <int> "mysql_errno"))

(define-cproc mysql-res-closed? (result::<mysql-res>)
  (expr <boolean> "MysqlClosedP(result_scm)"))

(define-cproc mysql-fetch-field-names (result::<mysql-res>)
  (call "MysqlFetchFieldNames"))

(define-cproc mysql-fetch-row (result::<mysql-res>)
  (call "MysqlFetchRow"))

(define-cproc mysql-close (connection::<mysql-handle>)
  (body <void> "mysql_cleanup(connection_scm);"))

(define-cproc mysql-free-result (result::<mysql-res>)
  (body <void> "mysql_res_cleanup(result_scm);"))

(define-cproc mysql-character-set-name (connection::<mysql-handle>)
  (call <const-cstring> "mysql_character_set_name"))

(define-cproc mysql-set-character-set (connection::<mysql-handle>
				       charset::<const-cstring>)
  (body <void>
	"if (mysql_set_character_set(connection, charset) != 0)"
	"  raise_mysql_error(connection, \"mysql_set_character_set\");"))

;;
;; Prepared Statement Handling
;;

(define-cproc mysql-stmt-prepare (connection::<mysql-handle> sql::<string>)
  (call <mysql-stmt> "MysqlStmtxPrepare"))

(define-cproc mysql-stmt-close (stmtx::<mysql-stmt>)
  (body <void> "mysql_stmtx_cleanup(stmtx_scm);"))

(define-cproc mysql-stmt-closed? (stmtx::<mysql-stmt>)
  (expr <boolean> "MysqlClosedP(stmtx_scm)"))

(define-cproc mysql-stmt-param-count (stmtx::<mysql-stmt>)
  (expr <ulong> "mysql_stmt_param_count(stmtx->stmt)"))

(define-cproc mysql-stmt-field-count (stmtx::<mysql-stmt>)
  (expr <ulong> "mysql_stmt_field_count(stmtx->stmt)"))

(define-cproc mysql-stmt-execute (stmtx::<mysql-stmt> &rest args)
  (body <void> "MysqlStmtxExecute(stmtx, args);"))

(define-cproc mysql-stmt-fetch (stmtx::<mysql-stmt>)
  (call "MysqlStmtxFetch"))

(define-cproc mysql-stmt-affected-rows (stmtx::<mysql-stmt>)
  (expr "MysqlStmtAffectedRows(stmtx->stmt)"))

;; from errmsg.h mysql-3.23
(define-enum-conditionally CR_MIN_ERROR)
(define-enum-conditionally CR_MAX_ERROR)
(define-enum-conditionally CLIENT_ERRMAP)
(define-enum-conditionally CR_UNKNOWN_ERROR)
(define-enum-conditionally CR_SOCKET_CREATE_ERROR)
(define-enum-conditionally CR_CONNECTION_ERROR)
(define-enum-conditionally CR_CONN_HOST_ERROR)
(define-enum-conditionally CR_IPSOCK_ERROR)
(define-enum-conditionally CR_UNKNOWN_HOST)
(define-enum-conditionally CR_SERVER_GONE_ERROR)
(define-enum-conditionally CR_VERSION_ERROR)
(define-enum-conditionally CR_OUT_OF_MEMORY)
(define-enum-conditionally CR_WRONG_HOST_INFO)
(define-enum-conditionally CR_LOCALHOST_CONNECTION)
(define-enum-conditionally CR_TCP_CONNECTION)
(define-enum-conditionally CR_SERVER_HANDSHAKE_ERR)
(define-enum-conditionally CR_SERVER_LOST)
(define-enum-conditionally CR_COMMANDS_OUT_OF_SYNC)
(define-enum-conditionally CR_NAMEDPIPE_CONNECTION)
(define-enum-conditionally CR_NAMEDPIPEWAIT_ERROR)
(define-enum-conditionally CR_NAMEDPIPEOPEN_ERROR)
(define-enum-conditionally CR_NAMEDPIPESETSTATE_ERROR)
(define-enum-conditionally CR_CANT_READ_CHARSET)
(define-enum-conditionally CR_NET_PACKET_TOO_LARGE)

;; from mysqld_error.h mysql-3.23
(define-enum-conditionally ER_HASHCHK)
(define-enum-conditionally ER_NISAMCHK)
(define-enum-conditionally ER_NO)
(define-enum-conditionally ER_YES)
(define-enum-conditionally ER_CANT_CREATE_FILE)
(define-enum-conditionally ER_CANT_CREATE_TABLE)
(define-enum-conditionally ER_CANT_CREATE_DB)
(define-enum-conditionally ER_DB_CREATE_EXISTS)
(define-enum-conditionally ER_DB_DROP_EXISTS)
(define-enum-conditionally ER_DB_DROP_DELETE)
(define-enum-conditionally ER_DB_DROP_RMDIR)
(define-enum-conditionally ER_CANT_DELETE_FILE)
(define-enum-conditionally ER_CANT_FIND_SYSTEM_REC)
(define-enum-conditionally ER_CANT_GET_STAT)
(define-enum-conditionally ER_CANT_GET_WD)
(define-enum-conditionally ER_CANT_LOCK)
(define-enum-conditionally ER_CANT_OPEN_FILE)
(define-enum-conditionally ER_FILE_NOT_FOUND)
(define-enum-conditionally ER_CANT_READ_DIR)
(define-enum-conditionally ER_CANT_SET_WD)
(define-enum-conditionally ER_CHECKREAD)
(define-enum-conditionally ER_DISK_FULL)
(define-enum-conditionally ER_DUP_KEY)
(define-enum-conditionally ER_ERROR_ON_CLOSE)
(define-enum-conditionally ER_ERROR_ON_READ)
(define-enum-conditionally ER_ERROR_ON_RENAME)
(define-enum-conditionally ER_ERROR_ON_WRITE)
(define-enum-conditionally ER_FILE_USED)
(define-enum-conditionally ER_FILSORT_ABORT)
(define-enum-conditionally ER_FORM_NOT_FOUND)
(define-enum-conditionally ER_GET_ERRNO)
(define-enum-conditionally ER_ILLEGAL_HA)
(define-enum-conditionally ER_KEY_NOT_FOUND)
(define-enum-conditionally ER_NOT_FORM_FILE)
(define-enum-conditionally ER_NOT_KEYFILE)
(define-enum-conditionally ER_OLD_KEYFILE)
(define-enum-conditionally ER_OPEN_AS_READONLY)
(define-enum-conditionally ER_OUTOFMEMORY)
(define-enum-conditionally ER_OUT_OF_SORTMEMORY)
(define-enum-conditionally ER_UNEXPECTED_EOF)
(define-enum-conditionally ER_CON_COUNT_ERROR)
(define-enum-conditionally ER_OUT_OF_RESOURCES)
(define-enum-conditionally ER_BAD_HOST_ERROR)
(define-enum-conditionally ER_HANDSHAKE_ERROR)
(define-enum-conditionally ER_DBACCESS_DENIED_ERROR)
(define-enum-conditionally ER_ACCESS_DENIED_ERROR)
(define-enum-conditionally ER_NO_DB_ERROR)
(define-enum-conditionally ER_UNKNOWN_COM_ERROR)
(define-enum-conditionally ER_BAD_NULL_ERROR)
(define-enum-conditionally ER_BAD_DB_ERROR)
(define-enum-conditionally ER_TABLE_EXISTS_ERROR)
(define-enum-conditionally ER_BAD_TABLE_ERROR)
(define-enum-conditionally ER_NON_UNIQ_ERROR)
(define-enum-conditionally ER_SERVER_SHUTDOWN)
(define-enum-conditionally ER_BAD_FIELD_ERROR)
(define-enum-conditionally ER_WRONG_FIELD_WITH_GROUP)
(define-enum-conditionally ER_WRONG_GROUP_FIELD)
(define-enum-conditionally ER_WRONG_SUM_SELECT)
(define-enum-conditionally ER_WRONG_VALUE_COUNT)
(define-enum-conditionally ER_TOO_LONG_IDENT)
(define-enum-conditionally ER_DUP_FIELDNAME)
(define-enum-conditionally ER_DUP_KEYNAME)
(define-enum-conditionally ER_DUP_ENTRY)
(define-enum-conditionally ER_WRONG_FIELD_SPEC)
(define-enum-conditionally ER_PARSE_ERROR)
(define-enum-conditionally ER_EMPTY_QUERY)
(define-enum-conditionally ER_NONUNIQ_TABLE)
(define-enum-conditionally ER_INVALID_DEFAULT)
(define-enum-conditionally ER_MULTIPLE_PRI_KEY)
(define-enum-conditionally ER_TOO_MANY_KEYS)
(define-enum-conditionally ER_TOO_MANY_KEY_PARTS)
(define-enum-conditionally ER_TOO_LONG_KEY)
(define-enum-conditionally ER_KEY_COLUMN_DOES_NOT_EXITS)
(define-enum-conditionally ER_BLOB_USED_AS_KEY)
(define-enum-conditionally ER_TOO_BIG_FIELDLENGTH)
(define-enum-conditionally ER_WRONG_AUTO_KEY)
(define-enum-conditionally ER_READY)
(define-enum-conditionally ER_NORMAL_SHUTDOWN)
(define-enum-conditionally ER_GOT_SIGNAL)
(define-enum-conditionally ER_SHUTDOWN_COMPLETE)
(define-enum-conditionally ER_FORCING_CLOSE)
(define-enum-conditionally ER_IPSOCK_ERROR)
(define-enum-conditionally ER_NO_SUCH_INDEX)
(define-enum-conditionally ER_WRONG_FIELD_TERMINATORS)
(define-enum-conditionally ER_BLOBS_AND_NO_TERMINATED)
(define-enum-conditionally ER_TEXTFILE_NOT_READABLE)
(define-enum-conditionally ER_FILE_EXISTS_ERROR)
(define-enum-conditionally ER_LOAD_INFO)
(define-enum-conditionally ER_ALTER_INFO)
(define-enum-conditionally ER_WRONG_SUB_KEY)
(define-enum-conditionally ER_CANT_REMOVE_ALL_FIELDS)
(define-enum-conditionally ER_CANT_DROP_FIELD_OR_KEY)
(define-enum-conditionally ER_INSERT_INFO)
(define-enum-conditionally ER_INSERT_TABLE_USED)
(define-enum-conditionally ER_NO_SUCH_THREAD)
(define-enum-conditionally ER_KILL_DENIED_ERROR)
(define-enum-conditionally ER_NO_TABLES_USED)
(define-enum-conditionally ER_TOO_BIG_SET)
(define-enum-conditionally ER_NO_UNIQUE_LOGFILE)
(define-enum-conditionally ER_TABLE_NOT_LOCKED_FOR_WRITE)
(define-enum-conditionally ER_TABLE_NOT_LOCKED)
(define-enum-conditionally ER_BLOB_CANT_HAVE_DEFAULT)
(define-enum-conditionally ER_WRONG_DB_NAME)
(define-enum-conditionally ER_WRONG_TABLE_NAME)
(define-enum-conditionally ER_TOO_BIG_SELECT)
(define-enum-conditionally ER_UNKNOWN_ERROR)
(define-enum-conditionally ER_UNKNOWN_PROCEDURE)
(define-enum-conditionally ER_WRONG_PARAMCOUNT_TO_PROCEDURE)
(define-enum-conditionally ER_WRONG_PARAMETERS_TO_PROCEDURE)
(define-enum-conditionally ER_UNKNOWN_TABLE)
(define-enum-conditionally ER_FIELD_SPECIFIED_TWICE)
(define-enum-conditionally ER_INVALID_GROUP_FUNC_USE)
(define-enum-conditionally ER_UNSUPPORTED_EXTENSION)
(define-enum-conditionally ER_TABLE_MUST_HAVE_COLUMNS)
(define-enum-conditionally ER_RECORD_FILE_FULL)
(define-enum-conditionally ER_UNKNOWN_CHARACTER_SET)
(define-enum-conditionally ER_TOO_MANY_TABLES)
(define-enum-conditionally ER_TOO_MANY_FIELDS)
(define-enum-conditionally ER_TOO_BIG_ROWSIZE)
(define-enum-conditionally ER_STACK_OVERRUN)
(define-enum-conditionally ER_WRONG_OUTER_JOIN)
(define-enum-conditionally ER_NULL_COLUMN_IN_INDEX)
(define-enum-conditionally ER_CANT_FIND_UDF)
(define-enum-conditionally ER_CANT_INITIALIZE_UDF)
(define-enum-conditionally ER_UDF_NO_PATHS)
(define-enum-conditionally ER_UDF_EXISTS)
(define-enum-conditionally ER_CANT_OPEN_LIBRARY)
(define-enum-conditionally ER_CANT_FIND_DL_ENTRY)
(define-enum-conditionally ER_FUNCTION_NOT_DEFINED)
(define-enum-conditionally ER_HOST_IS_BLOCKED)
(define-enum-conditionally ER_HOST_NOT_PRIVILEGED)
(define-enum-conditionally ER_PASSWORD_ANONYMOUS_USER)
(define-enum-conditionally ER_PASSWORD_NOT_ALLOWED)
(define-enum-conditionally ER_PASSWORD_NO_MATCH)
(define-enum-conditionally ER_UPDATE_INFO)
(define-enum-conditionally ER_CANT_CREATE_THREAD)
(define-enum-conditionally ER_WRONG_VALUE_COUNT_ON_ROW)
(define-enum-conditionally ER_CANT_REOPEN_TABLE)
(define-enum-conditionally ER_INVALID_USE_OF_NULL)
(define-enum-conditionally ER_REGEXP_ERROR)
(define-enum-conditionally ER_MIX_OF_GROUP_FUNC_AND_FIELDS)
(define-enum-conditionally ER_NONEXISTING_GRANT)
(define-enum-conditionally ER_TABLEACCESS_DENIED_ERROR)
(define-enum-conditionally ER_COLUMNACCESS_DENIED_ERROR)
(define-enum-conditionally ER_ILLEGAL_GRANT_FOR_TABLE)
(define-enum-conditionally ER_GRANT_WRONG_HOST_OR_USER)
(define-enum-conditionally ER_NO_SUCH_TABLE)
(define-enum-conditionally ER_NONEXISTING_TABLE_GRANT)
(define-enum-conditionally ER_NOT_ALLOWED_COMMAND)
(define-enum-conditionally ER_SYNTAX_ERROR)
(define-enum-conditionally ER_DELAYED_CANT_CHANGE_LOCK)
(define-enum-conditionally ER_TOO_MANY_DELAYED_THREADS)
(define-enum-conditionally ER_ABORTING_CONNECTION)
(define-enum-conditionally ER_NET_PACKET_TOO_LARGE)
(define-enum-conditionally ER_NET_READ_ERROR_FROM_PIPE)
(define-enum-conditionally ER_NET_FCNTL_ERROR)
(define-enum-conditionally ER_NET_PACKETS_OUT_OF_ORDER)
(define-enum-conditionally ER_NET_UNCOMPRESS_ERROR)
(define-enum-conditionally ER_NET_READ_ERROR)
(define-enum-conditionally ER_NET_READ_INTERRUPTED)
(define-enum-conditionally ER_NET_ERROR_ON_WRITE)
(define-enum-conditionally ER_NET_WRITE_INTERRUPTED)
(define-enum-conditionally ER_TOO_LONG_STRING)
(define-enum-conditionally ER_TABLE_CANT_HANDLE_BLOB)
(define-enum-conditionally ER_TABLE_CANT_HANDLE_AUTO_INCREMENT)
(define-enum-conditionally ER_DELAYED_INSERT_TABLE_LOCKED)
(define-enum-conditionally ER_WRONG_COLUMN_NAME)
(define-enum-conditionally ER_WRONG_KEY_COLUMN)
(define-enum-conditionally ER_WRONG_MRG_TABLE)
(define-enum-conditionally ER_DUP_UNIQUE)
(define-enum-conditionally ER_BLOB_KEY_WITHOUT_LENGTH)
(define-enum-conditionally ER_PRIMARY_CANT_HAVE_NULL)
(define-enum-conditionally ER_TOO_MANY_ROWS)
(define-enum-conditionally ER_REQUIRES_PRIMARY_KEY)
(define-enum-conditionally ER_NO_RAID_COMPILED)
(define-enum-conditionally ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE)
(define-enum-conditionally ER_KEY_DOES_NOT_EXITS)
(define-enum-conditionally ER_CHECK_NO_SUCH_TABLE)
(define-enum-conditionally ER_CHECK_NOT_IMPLEMENTED)
(define-enum-conditionally ER_CANT_DO_THIS_DURING_AN_TRANSACTION)
(define-enum-conditionally ER_ERROR_DURING_COMMIT)
(define-enum-conditionally ER_ERROR_DURING_ROLLBACK)
(define-enum-conditionally ER_ERROR_DURING_FLUSH_LOGS)
(define-enum-conditionally ER_ERROR_DURING_CHECKPOINT)
(define-enum-conditionally ER_NEW_ABORTING_CONNECTION)
(define-enum-conditionally ER_DUMP_NOT_IMPLEMENTED   )
(define-enum-conditionally ER_FLUSH_MASTER_BINLOG_CLOSED)
(define-enum-conditionally ER_INDEX_REBUILD )
(define-enum-conditionally ER_MASTER)
(define-enum-conditionally ER_MASTER_NET_READ)
(define-enum-conditionally ER_MASTER_NET_WRITE)
(define-enum-conditionally ER_FT_MATCHING_KEY_NOT_FOUND)
(define-enum-conditionally ER_LOCK_OR_ACTIVE_TRANSACTION)
(define-enum-conditionally ER_UNKNOWN_SYSTEM_VARIABLE)
(define-enum-conditionally ER_CRASHED_ON_USAGE)
(define-enum-conditionally ER_CRASHED_ON_REPAIR)
(define-enum-conditionally ER_WARNING_NOT_COMPLETE_ROLLBACK)
(define-enum-conditionally ER_TRANS_CACHE_FULL)
(define-enum-conditionally ER_SLAVE_MUST_STOP)
(define-enum-conditionally ER_SLAVE_NOT_RUNNING)
(define-enum-conditionally ER_BAD_SLAVE)
(define-enum-conditionally ER_MASTER_INFO)
(define-enum-conditionally ER_SLAVE_THREAD)
(define-enum-conditionally ER_TOO_MANY_USER_CONNECTIONS)
(define-enum-conditionally ER_SET_CONSTANTS_ONLY)
(define-enum-conditionally ER_LOCK_WAIT_TIMEOUT)
(define-enum-conditionally ER_LOCK_TABLE_FULL)
(define-enum-conditionally ER_READ_ONLY_TRANSACTION)
(define-enum-conditionally ER_DROP_DB_WITH_READ_LOCK)
(define-enum-conditionally ER_CREATE_DB_WITH_READ_LOCK)
(define-enum-conditionally ER_WRONG_ARGUMENTS)
(define-enum-conditionally ER_NO_PERMISSION_TO_CREATE_USER)
(define-enum-conditionally ER_UNION_TABLES_IN_DIFFERENT_DIR)
(define-enum-conditionally ER_LOCK_DEADLOCK)
(define-enum-conditionally ER_TABLE_CANT_HANDLE_FULLTEXT)
(define-enum-conditionally ER_CANNOT_ADD_FOREIGN)
(define-enum-conditionally ER_NO_REFERENCED_ROW)
(define-enum-conditionally ER_ROW_IS_REFERENCED)
(define-enum-conditionally ER_ERROR_MESSAGES)

"#define ulong uint32_t"
(define-enum-conditionally CLIENT_COMPRESS)
(define-enum-conditionally CLIENT_FOUND_ROWS)
(define-enum-conditionally CLIENT_IGNORE_SPACE)
(define-enum-conditionally CLIENT_INTERACTIVE)
(define-enum-conditionally CLIENT_LOCAL_FILES)
(define-enum-conditionally CLIENT_MULTI_RESULTS)
(define-enum-conditionally CLIENT_MULTI_STATEMENTS)
(define-enum-conditionally CLIENT_NO_SCHEMA)
(define-enum-conditionally CLIENT_ODBC)
(define-enum-conditionally CLIENT_SSL)